import Head from "next/head";
import ContributeSection from "@/components/sections/ContributeSection";
import styles from "@/styles/Subpage.module.css";
import LabeledDivider from "@/components/dividers/LabeledDivider";
import Image from "next/image";
import PastEvents from "@/components/display/PastEvents";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import EventCard from "@/components/cards/EventCard";

export default function Single_event() {
  const router = useRouter();
  const evttitle = router.query.single_event;
  console.log("evttitle:", evttitle);

  const [events, setEvents] = useState([]);

  useEffect(() => {
    // Fetch data from Supabase here
    fetchData();
  }, []);

  const fetchData = async () => {
    try {
      const response = await fetch(`/api/events`);
      const data = await response.json();
      //   console.log("Fetched data:", data);
      setEvents(data.data || []);
    } catch (error) {
      console.error("Error fetching data:", error);
    }
  };

  const matchedEvent = events.find((event) => event.event_name === evttitle);
  const eventNr = matchedEvent ? matchedEvent.event_nr : "";
  const screeningDate = matchedEvent ? matchedEvent.screening_date : "";
  const movieName = matchedEvent ? matchedEvent.movie_name : "";
  const tagline = matchedEvent ? matchedEvent.tagline : "";
  const director = matchedEvent ? matchedEvent.director : "";
  const runtime = matchedEvent ? matchedEvent.runtime : "";
  const language = matchedEvent ? matchedEvent.language : "";
  const location = matchedEvent ? matchedEvent.location : "";
  const description = matchedEvent ? matchedEvent.description : "";
  const cast = matchedEvent ? matchedEvent.cast : "";

  const sortedEvents = [...events].sort((a, b) => a.screening_date.localeCompare(b.screening_date)); // or use event_nr for sorting

  const currentIndex = sortedEvents.findIndex((event) => event.event_name === evttitle);

  const previousEvent = sortedEvents[currentIndex - 1];
  const nextEvent = sortedEvents[currentIndex + 1];

  const previousEventNr = previousEvent ? `${parseInt(previousEvent.event_nr)}` : "";
  const nextEventNr = nextEvent ? `${parseInt(nextEvent.event_nr)}` : "";
  const previousEventTitle = previousEvent ? previousEvent.event_name : null;
  const nextEventTitle = nextEvent ? nextEvent.event_name : null;

  return (
    <>
      <Head>
        <title>{evttitle}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main}`}>
        <div className={styles.subpage_hero}>
          <div className={styles.single_evt_display}>
            <PastEvents />
          </div>
          <div className={styles.event_details}>
            <div>
              <h4 className="label">Nr. of event</h4>
              <h3 className={styles.event_nr}>#0{eventNr}</h3>
            </div>
            <div>
              <h4 className="label">Screening date</h4>
              <h3 className={styles.event_date}>{screeningDate}</h3>
            </div>
          </div>
          <h2 className={`highlighted ${styles.abstract}`}>{tagline}</h2>
        </div>
        <div className={styles.evt_content}>
          <div>
            <h4 className={`label`}>Movie name</h4>
            <h1 className={styles.moviename}>{movieName}</h1>
          </div>
          <div className={styles.grid}>
            <Image className={styles.movie_img} src={`/${eventNr}-square.webp`} alt="still from a movie" width={400} height={400} layout="responsive" />
            <LabeledDivider label={"Movie info"} />
            <div className={styles.movie_info}>
              <p>Director: {director}</p>
              <p>Runtime: {runtime}</p>
              <p>Language: {language}</p>
              <p>Main Cast: {cast}</p>
              <p>Location: {location}</p>
            </div>
            <p className={styles.long_description}>{description}</p>
          </div>
        </div>
        <div className={styles.event_group}>
          <div>
            <LabeledDivider label={"Next event"} />
            <EventCard key={nextEventNr} evtnumber={nextEventNr} evttitle={nextEventTitle} />
          </div>
          <div>
            <LabeledDivider label={"Previous event"} />
            <EventCard key={previousEventNr} evtnumber={previousEventNr} evttitle={previousEventTitle} />
          </div>
        </div>
        <ContributeSection />
      </main>
    </>
  );
}
